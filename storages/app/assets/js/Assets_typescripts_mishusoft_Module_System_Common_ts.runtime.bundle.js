"use strict";
(self["webpackChunkMishusoftRuntime"] = self["webpackChunkMishusoftRuntime"] || []).push([["Assets_typescripts_mishusoft_Module_System_Common_ts"],{

/***/ "./Assets/typescripts/mishusoft/Module/System/Common.ts":
/*!**************************************************************!*\
  !*** ./Assets/typescripts/mishusoft/Module/System/Common.ts ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Common": () => (/* binding */ Common)
/* harmony export */ });
class Common {
    appHost;
    constructor(appHost) {
        this.appHost = appHost;
    }
    handleCommonEvent() {
        let self = this;
        __webpack_require__.e(/*! import() */ "Assets_typescripts_common_dom_ts").then(__webpack_require__.bind(__webpack_require__, /*! ../../../common/dom */ "./Assets/typescripts/common/dom.ts")).then(function (dom) {
            let captureElement = dom.captureElement;
            let createElement = dom.createElement;
            Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../../common/request */ "./Assets/typescripts/common/request.ts")).then(function (request) {
                let sendRequest = request.sendRequest;
                Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../../../common/validation */ "./Assets/typescripts/common/validation.ts")).then(function (validation) {
                    let IsJsonString = validation.IsJsonString;
                    if (captureElement("#system-notification-viewer") !== undefined) {
                        sendRequest({
                            method: "GET",
                            url: self.appHost + 'api/getVisitorsAccessLogsLimited',
                            async: true,
                            header: [{ name: "Content-type", value: "application/json;charset=UTF-8" }],
                        }, function (response) {
                            if (response.length !== 0 && IsJsonString(response)) {
                                if (JSON.parse(response).length !== 0) {
                                    captureElement("#system-notification-viewer").textContent = '';
                                    JSON.parse(response).forEach(function (log) {
                                        const messageBody = createElement([{
                                                'a': {
                                                    'class': 'box-message ' + ((log.message_type.toLowerCase() === 'error') ? 'box-danger' : ((log.message_type.toLowerCase() === 'success') ? 'box-success' : ((log.message_type.toLowerCase() === 'notify') ? 'box-notify' : ' '))) + ' box-shadow-light',
                                                    /*'style': 'padding: 0 0 0 4px;',*/
                                                    'href': self.appHost + 'system/log/view/' + log.id,
                                                    'title': '[' + log.ip + '] [' + log.browser + '] [' + log.time + ']',
                                                }
                                            }]);
                                        const messageIcon = createElement([{
                                                'span': {
                                                    'class': ((log.message_type.toLowerCase() === 'error') ? 'box-danger-symbol' : ((log.message_type.toLowerCase() === 'success') ? 'box-success-symbol' : ((log.message_type.toLowerCase() === 'notify') ? 'box-notify-symbol' : ' '))),
                                                }
                                            }]);
                                        messageBody.appendChild(messageIcon);
                                        const messageIconFile = createElement([{
                                                'i': {
                                                    'class': ((log.message_type.toLowerCase() === 'error') ? 'fa fa-times' : ((log.message_type.toLowerCase() === 'success') ? 'fa fa-check' : ((log.message_type.toLowerCase() === 'notify') ? 'fa fa-info' : ''))),
                                                }
                                            }]);
                                        messageIcon.appendChild(messageIconFile);
                                        const messageBodyContent = createElement([{ 'div': { 'class': (captureElement('#notify') !== undefined) ? captureElement('#notify').value : 'notify-md-content', } }]);
                                        messageBody.appendChild(messageBodyContent);
                                        const ipLink = createElement([{
                                                'a': {
                                                    'class': 'link',
                                                    'href': self.appHost + 'addons/ipinfo/' + log.ip,
                                                }
                                            }]);
                                        ipLink.textContent = log.author + ' with ' + log.browser /*+  ' from ' + log.country*/;
                                        messageBodyContent.appendChild(ipLink);
                                        const contentLink = createElement([{ 'span': { 'class': 'link', } }]);
                                        messageBodyContent.appendChild(contentLink);
                                        const content = createElement([{ 'p': { 'class': 'link', } }]);
                                        content.textContent = log.message.replace(/\s*\<.*?\>\s*/g, ' ').substr(0, 35) + '...';
                                        messageBodyContent.appendChild(content);
                                        captureElement("#system-notification-viewer").appendChild(messageBody);
                                    });
                                }
                                else {
                                    captureElement("#system-notification-viewer").textContent = '';
                                    const messageBody = createElement([{
                                            'div': {
                                                'class': 'box-message box-danger box-shadow-light',
                                                /*'style': 'padding: 0 0 0 4px;',*/
                                            }
                                        }]);
                                    const messageIcon = createElement([{
                                            'span': {
                                                'class': 'box-danger-symbol',
                                            }
                                        }]);
                                    messageBody.appendChild(messageIcon);
                                    const messageIconFile = createElement([{
                                            'i': {
                                                'class': 'fa fa-times',
                                            }
                                        }]);
                                    messageIcon.appendChild(messageIconFile);
                                    const messageBodyContent = createElement([{ 'div': { 'class': 'notify-md-content', } }]);
                                    messageBodyContent.textContent = 'No notification found.';
                                    messageBody.appendChild(messageBodyContent);
                                    captureElement("#system-notification-viewer").appendChild(messageBody);
                                }
                            }
                        });
                    }
                    if (captureElement("#system-contact-message-viewer") !== undefined) {
                        sendRequest({
                            method: "GET",
                            url: self.appHost + 'api/getContactMessagesLimited',
                            async: true,
                            header: [{ name: "Content-type", value: "application/json;charset=UTF-8" }],
                        }, function (response) {
                            if (response.length !== 0 && IsJsonString(response)) {
                                if (JSON.parse(response).length !== 0) {
                                    captureElement("#system-contact-message-viewer").textContent = '';
                                    JSON.parse(response).forEach(function (message) {
                                        const messageBody = createElement([{
                                                'a': {
                                                    'class': 'box-message box-success box-shadow-light',
                                                    'href': self.appHost + 'system/contactmessage/view/' + message.id,
                                                }
                                            }]);
                                        const messageIcon = createElement([{
                                                'span': {
                                                    'class': 'box-success-symbol',
                                                }
                                            }]);
                                        messageBody.appendChild(messageIcon);
                                        const messageIconFile = createElement([{
                                                'i': {
                                                    'class': 'fa fa-check',
                                                }
                                            }]);
                                        messageIcon.appendChild(messageIconFile);
                                        const messageBodyContent = createElement([{ 'div': { 'class': (captureElement('#notify') !== undefined) ? captureElement('#notify').value : 'notify-md-content', } }]);
                                        messageBody.appendChild(messageBodyContent);
                                        const sender = createElement([{
                                                'a': {
                                                    'class': 'link',
                                                    /*'href': appHost + 'addons/ipinfo/' + message.ip,*/
                                                }
                                            }]);
                                        sender.textContent = message.f_name + ' ' + message.l_name + ' send a ' + message.subject;
                                        messageBodyContent.appendChild(sender);
                                        const content = createElement([{ 'p': {} }]);
                                        content.textContent = message.message;
                                        messageBodyContent.appendChild(content);
                                        captureElement("#system-contact-message-viewer").appendChild(messageBody);
                                    });
                                }
                                else {
                                    captureElement("#system-contact-message-viewer").textContent = '';
                                    const messageBody = createElement([{
                                            'div': {
                                                'class': 'box-message box-danger box-shadow-light',
                                                /*'style': 'padding: 0 0 0 4px;',*/
                                            }
                                        }]);
                                    const messageIcon = createElement([{
                                            'span': {
                                                'class': 'box-danger-symbol',
                                            }
                                        }]);
                                    messageBody.appendChild(messageIcon);
                                    const messageIconFile = createElement([{
                                            'i': {
                                                'class': 'fa fa-times',
                                            }
                                        }]);
                                    messageIcon.appendChild(messageIconFile);
                                    const messageBodyContent = createElement([{ 'div': { 'class': 'notify-md-content', } }]);
                                    messageBodyContent.textContent = 'No message found.';
                                    messageBody.appendChild(messageBodyContent);
                                    captureElement("#system-contact-message-viewer").appendChild(messageBody);
                                }
                            }
                        });
                    }
                    if (captureElement('#system-default-menus') !== undefined) {
                        sendRequest({
                            method: "GET",
                            url: self.appHost + 'system/index/getMainItemTabs',
                            async: true,
                            header: [{ name: "Content-type", value: "application/json;charset=UTF-8" }],
                        }, function (response) {
                            if (response.length !== 0 && IsJsonString(response)) {
                                if (JSON.parse(response).length !== 0) {
                                    captureElement("#system-default-menus").textContent = '';
                                    JSON.parse(response).forEach(function (menu) {
                                        const systemMenu = createElement([{
                                                'a': {
                                                    'class': 'thumbnail-md box-shadow-light',
                                                    'href': self.appHost + 'system/' + menu.url,
                                                    'title': menu.title,
                                                }
                                            }]);
                                        const systemMenuIcon = createElement([{ 'span': { 'class': 'thumbnail-image', } }]);
                                        systemMenu.appendChild(systemMenuIcon);
                                        const systemMenuIconFile = createElement([{ 'i': { 'class': menu.icon, } }]);
                                        systemMenuIcon.appendChild(systemMenuIconFile);
                                        const systemMenuName = createElement([{ 'div': { 'class': 'thumbnail-text', } }]);
                                        systemMenuName.textContent = menu.name;
                                        systemMenu.appendChild(systemMenuName);
                                        captureElement("#system-default-menus").appendChild(systemMenu);
                                    });
                                }
                                else {
                                    const systemMenu = createElement([{
                                            'div': {
                                                'class': 'thumbnail-md box-shadow-light',
                                                'style': 'padding: 45px 25px;',
                                            }
                                        }]);
                                    systemMenu.textContent = 'No menu exists.';
                                    captureElement("#system-default-menus").appendChild(systemMenu);
                                }
                            }
                        });
                    }
                    if (captureElement('#system-extra-menus') !== undefined) {
                        sendRequest({
                            method: "GET",
                            url: self.appHost + 'system/index/getExtraItemTabs',
                            async: true,
                            header: [{ name: "Content-type", value: "application/json;charset=UTF-8" }],
                        }, function (response) {
                            if (response.length !== 0 && IsJsonString(response)) {
                                if (JSON.parse(response).length !== 0) {
                                    captureElement('#system-extra-menus').textContent = '';
                                    JSON.parse(response).forEach(function (menu) {
                                        const extraMenu = createElement([{
                                                'a': {
                                                    'class': 'thumbnail-md box-shadow-light',
                                                    'href': self.appHost + 'system/' + menu.url,
                                                    'title': menu.title,
                                                }
                                            }]);
                                        const extraMenuIcon = createElement([{ 'span': { 'class': 'thumbnail-image', } }]);
                                        extraMenu.appendChild(extraMenuIcon);
                                        const extraMenuIconFile = createElement([{ 'i': { 'class': menu.icon, } }]);
                                        extraMenuIcon.appendChild(extraMenuIconFile);
                                        const extraMenuName = createElement([{ 'div': { 'class': 'thumbnail-text', } }]);
                                        extraMenuName.textContent = menu.name;
                                        extraMenu.appendChild(extraMenuName);
                                        captureElement("#system-extra-menus").appendChild(extraMenu);
                                    });
                                }
                                else {
                                    const extraMenu = createElement([{
                                            'div': {
                                                'class': 'thumbnail-md box-shadow-light',
                                                'style': 'padding: 45px 25px;',
                                            }
                                        }]);
                                    extraMenu.textContent = 'No menu exists.';
                                    captureElement("#system-extra-menus").appendChild(extraMenu);
                                }
                            }
                        });
                    }
                }).catch(function (err) {
                    console.log(err);
                });
            }).catch(function (err) {
                console.log(err);
            });
        }).catch(function (err) {
            console.log(err);
        });
    }
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoianMvQXNzZXRzX3R5cGVzY3JpcHRzX21pc2h1c29mdF9Nb2R1bGVfU3lzdGVtX0NvbW1vbl90cy5ydW50aW1lLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQU8sTUFBTSxNQUFNO0lBRUg7SUFEWixZQUNZLE9BQWdCO1FBQWhCLFlBQU8sR0FBUCxPQUFPLENBQVM7SUFFNUIsQ0FBQztJQUVELGlCQUFpQjtRQUNiLElBQUksSUFBSSxHQUFHLElBQUksQ0FBQztRQUNoQiw4TEFBNkIsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHO1lBQzVDLElBQUksY0FBYyxHQUFHLEdBQUcsQ0FBQyxjQUFjLENBQUM7WUFDeEMsSUFBSSxhQUFhLEdBQUcsR0FBRyxDQUFDLGFBQWEsQ0FBQztZQUN0Qyw2SkFBaUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxPQUFPO2dCQUNwRCxJQUFJLFdBQVcsR0FBRyxPQUFPLENBQUMsV0FBVyxDQUFDO2dCQUN0QyxtS0FBb0MsQ0FBQyxJQUFJLENBQUMsVUFBVSxVQUFVO29CQUMxRCxJQUFJLFlBQVksR0FBRyxVQUFVLENBQUMsWUFBWSxDQUFDO29CQUMzQyxJQUFJLGNBQWMsQ0FBQyw2QkFBNkIsQ0FBQyxLQUFLLFNBQVMsRUFBRTt3QkFDN0QsV0FBVyxDQUFDOzRCQUNSLE1BQU0sRUFBRSxLQUFLOzRCQUNiLEdBQUcsRUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLGtDQUFrQzs0QkFDdEQsS0FBSyxFQUFFLElBQUk7NEJBQ1gsTUFBTSxFQUFFLENBQUMsRUFBQyxJQUFJLEVBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxnQ0FBZ0MsRUFBQyxDQUFDO3lCQUM1RSxFQUFFLFVBQVUsUUFBYTs0QkFDdEIsSUFBSSxRQUFRLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0NBQ2pELElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO29D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WUFDUCxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHO2dCQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQztZQUNwQixDQUFDLENBQUMsQ0FBQztRQUNQLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxVQUFVLEdBQUc7WUFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFDcEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9NaXNodXNvZnRSdW50aW1lLy4vQXNzZXRzL3R5cGVzY3JpcHRzL21pc2h1c29mdC9Nb2R1bGUvU3lzdGVtL0NvbW1vbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQ29tbW9uIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBhcHBIb3N0IDogc3RyaW5nXG4gICAgKSB7XG4gICAgfVxuXG4gICAgaGFuZGxlQ29tbW9uRXZlbnQoKXtcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICBpbXBvcnQoJy4uLy4uLy4uL2NvbW1vbi9kb20nKS50aGVuKGZ1bmN0aW9uIChkb20pIHtcbiAgICAgICAgICAgIGxldCBjYXB0dXJlRWxlbWVudCA9IGRvbS5jYXB0dXJlRWxlbWVudDtcbiAgICAgICAgICAgIGxldCBjcmVhdGVFbGVtZW50ID0gZG9tLmNyZWF0ZUVsZW1lbnQ7XG4gICAgICAgICAgICBpbXBvcnQoJy4uLy4uLy4uL2NvbW1vbi9yZXF1ZXN0JykudGhlbihmdW5jdGlvbiAocmVxdWVzdCkge1xuICAgICAgICAgICAgICAgIGxldCBzZW5kUmVxdWVzdCA9IHJlcXVlc3Quc2VuZFJlcXVlc3Q7XG4gICAgICAgICAgICAgICAgaW1wb3J0KCcuLi8uLi8uLi9jb21tb24vdmFsaWRhdGlvbicpLnRoZW4oZnVuY3Rpb24gKHZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IElzSnNvblN0cmluZyA9IHZhbGlkYXRpb24uSXNKc29uU3RyaW5nO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY2FwdHVyZUVsZW1lbnQoXCIjc3lzdGVtLW5vdGlmaWNhdGlvbi12aWV3ZXJcIikgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNlbGYuYXBwSG9zdCArICdhcGkvZ2V0VmlzaXRvcnNBY2Nlc3NMb2dzTGltaXRlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiBbe25hbWU6IFwiQ29udGVudC10eXBlXCIsIHZhbHVlOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwifV0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2U6IGFueSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5sZW5ndGggIT09IDAgJiYgSXNKc29uU3RyaW5nKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoSlNPTi5wYXJzZShyZXNwb25zZSkubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0dXJlRWxlbWVudChcIiNzeXN0ZW0tbm90aWZpY2F0aW9uLXZpZXdlclwiKS50ZXh0Q29udGVudCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5wYXJzZShyZXNwb25zZSkuZm9yRWFjaChmdW5jdGlvbiAobG9nOiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlQm9keSA9IGNyZWF0ZUVsZW1lbnQoW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2EnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOiAnYm94LW1lc3NhZ2UgJyArICgobG9nLm1lc3NhZ2VfdHlwZS50b0xvd2VyQ2FzZSgpID09PSAnZXJyb3InKSA/ICdib3gtZGFuZ2VyJyA6ICgobG9nLm1lc3NhZ2VfdHlwZS50b0xvd2VyQ2FzZSgpID09PSAnc3VjY2VzcycpID8gJ2JveC1zdWNjZXNzJyA6ICgobG9nLm1lc3NhZ2VfdHlwZS50b0xvd2VyQ2FzZSgpID09PSAnbm90aWZ5JykgPyAnYm94LW5vdGlmeScgOiAnICcpKSkgKyAnIGJveC1zaGFkb3ctbGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyonc3R5bGUnOiAncGFkZGluZzogMCAwIDAgNHB4OycsKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdocmVmJzogc2VsZi5hcHBIb3N0ICsgJ3N5c3RlbS9sb2cvdmlldy8nICsgbG9nLmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3RpdGxlJzogJ1snICsgbG9nLmlwICsgJ10gWycgKyBsb2cuYnJvd3NlciArICddIFsnICsgbG9nLnRpbWUgKyAnXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZUljb24gPSBjcmVhdGVFbGVtZW50KFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzcGFuJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzogKChsb2cubWVzc2FnZV90eXBlLnRvTG93ZXJDYXNlKCkgPT09ICdlcnJvcicpID8gJ2JveC1kYW5nZXItc3ltYm9sJyA6ICgobG9nLm1lc3NhZ2VfdHlwZS50b0xvd2VyQ2FzZSgpID09PSAnc3VjY2VzcycpID8gJ2JveC1zdWNjZXNzLXN5bWJvbCcgOiAoKGxvZy5tZXNzYWdlX3R5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ25vdGlmeScpID8gJ2JveC1ub3RpZnktc3ltYm9sJyA6ICcgJykpKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlQm9keS5hcHBlbmRDaGlsZChtZXNzYWdlSWNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZUljb25GaWxlID0gY3JlYXRlRWxlbWVudChbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjbGFzcyc6ICgobG9nLm1lc3NhZ2VfdHlwZS50b0xvd2VyQ2FzZSgpID09PSAnZXJyb3InKSA/ICdmYSBmYS10aW1lcycgOiAoKGxvZy5tZXNzYWdlX3R5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ3N1Y2Nlc3MnKSA/ICdmYSBmYS1jaGVjaycgOiAoKGxvZy5tZXNzYWdlX3R5cGUudG9Mb3dlckNhc2UoKSA9PT0gJ25vdGlmeScpID8gJ2ZhIGZhLWluZm8nIDogJycpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUljb24uYXBwZW5kQ2hpbGQobWVzc2FnZUljb25GaWxlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VCb2R5Q29udGVudCA9IGNyZWF0ZUVsZW1lbnQoW3snZGl2JzogeydjbGFzcyc6IChjYXB0dXJlRWxlbWVudCgnI25vdGlmeScpICE9PSB1bmRlZmluZWQpID8gY2FwdHVyZUVsZW1lbnQoJyNub3RpZnknKS52YWx1ZSA6ICdub3RpZnktbWQtY29udGVudCcsfX1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlQm9keS5hcHBlbmRDaGlsZChtZXNzYWdlQm9keUNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlwTGluayA9IGNyZWF0ZUVsZW1lbnQoW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2EnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOiAnbGluaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaHJlZic6IHNlbGYuYXBwSG9zdCArICdhZGRvbnMvaXBpbmZvLycgKyBsb2cuaXAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXBMaW5rLnRleHRDb250ZW50ID0gbG9nLmF1dGhvciArICcgd2l0aCAnICsgbG9nLmJyb3dzZXIgLyorICAnIGZyb20gJyArIGxvZy5jb3VudHJ5Ki87XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUJvZHlDb250ZW50LmFwcGVuZENoaWxkKGlwTGluayk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY29udGVudExpbmsgPSBjcmVhdGVFbGVtZW50KFt7J3NwYW4nOiB7J2NsYXNzJzogJ2xpbmsnLH19XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUJvZHlDb250ZW50LmFwcGVuZENoaWxkKGNvbnRlbnRMaW5rKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gY3JlYXRlRWxlbWVudChbeydwJzogeydjbGFzcyc6ICdsaW5rJyx9fV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQudGV4dENvbnRlbnQgPSBsb2cubWVzc2FnZS5yZXBsYWNlKC9cXHMqXFw8Lio/XFw+XFxzKi9nLCAnICcpLnN1YnN0cigwLCAzNSkgKyAnLi4uJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlQm9keUNvbnRlbnQuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwdHVyZUVsZW1lbnQoXCIjc3lzdGVtLW5vdGlmaWNhdGlvbi12aWV3ZXJcIikuYXBwZW5kQ2hpbGQobWVzc2FnZUJvZHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcHR1cmVFbGVtZW50KFwiI3N5c3RlbS1ub3RpZmljYXRpb24tdmlld2VyXCIpLnRleHRDb250ZW50ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlQm9keSA9IGNyZWF0ZUVsZW1lbnQoW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOiAnYm94LW1lc3NhZ2UgYm94LWRhbmdlciBib3gtc2hhZG93LWxpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyonc3R5bGUnOiAncGFkZGluZzogMCAwIDAgNHB4OycsKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlSWNvbiA9IGNyZWF0ZUVsZW1lbnQoW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3Bhbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzogJ2JveC1kYW5nZXItc3ltYm9sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlQm9keS5hcHBlbmRDaGlsZChtZXNzYWdlSWNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlSWNvbkZpbGUgPSBjcmVhdGVFbGVtZW50KFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2knOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjbGFzcyc6ICdmYSBmYS10aW1lcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUljb24uYXBwZW5kQ2hpbGQobWVzc2FnZUljb25GaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VCb2R5Q29udGVudCA9IGNyZWF0ZUVsZW1lbnQoW3snZGl2JzogeydjbGFzcyc6ICdub3RpZnktbWQtY29udGVudCcsfX1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VCb2R5Q29udGVudC50ZXh0Q29udGVudCA9ICdObyBub3RpZmljYXRpb24gZm91bmQuJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VCb2R5LmFwcGVuZENoaWxkKG1lc3NhZ2VCb2R5Q29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0dXJlRWxlbWVudChcIiNzeXN0ZW0tbm90aWZpY2F0aW9uLXZpZXdlclwiKS5hcHBlbmRDaGlsZChtZXNzYWdlQm9keSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjYXB0dXJlRWxlbWVudChcIiNzeXN0ZW0tY29udGFjdC1tZXNzYWdlLXZpZXdlclwiKSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kUmVxdWVzdCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiBcIkdFVFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogc2VsZi5hcHBIb3N0ICsgJ2FwaS9nZXRDb250YWN0TWVzc2FnZXNMaW1pdGVkJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3luYzogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXI6IFt7bmFtZTogXCJDb250ZW50LXR5cGVcIiwgdmFsdWU6IFwiYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PVVURi04XCJ9XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZTogYW55KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmxlbmd0aCAhPT0gMCAmJiBJc0pzb25TdHJpbmcocmVzcG9uc2UpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChKU09OLnBhcnNlKHJlc3BvbnNlKS5sZW5ndGggIT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcHR1cmVFbGVtZW50KFwiI3N5c3RlbS1jb250YWN0LW1lc3NhZ2Utdmlld2VyXCIpLnRleHRDb250ZW50ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU09OLnBhcnNlKHJlc3BvbnNlKS5mb3JFYWNoKGZ1bmN0aW9uIChtZXNzYWdlOiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlQm9keSA9IGNyZWF0ZUVsZW1lbnQoW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2EnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOiAnYm94LW1lc3NhZ2UgYm94LXN1Y2Nlc3MgYm94LXNoYWRvdy1saWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaHJlZic6IHNlbGYuYXBwSG9zdCArICdzeXN0ZW0vY29udGFjdG1lc3NhZ2Uvdmlldy8nICsgbWVzc2FnZS5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlSWNvbiA9IGNyZWF0ZUVsZW1lbnQoW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3NwYW4nOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOiAnYm94LXN1Y2Nlc3Mtc3ltYm9sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlQm9keS5hcHBlbmRDaGlsZChtZXNzYWdlSWNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZUljb25GaWxlID0gY3JlYXRlRWxlbWVudChbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnaSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjbGFzcyc6ICdmYSBmYS1jaGVjaycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUljb24uYXBwZW5kQ2hpbGQobWVzc2FnZUljb25GaWxlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VCb2R5Q29udGVudCA9IGNyZWF0ZUVsZW1lbnQoW3snZGl2JzogeydjbGFzcyc6IChjYXB0dXJlRWxlbWVudCgnI25vdGlmeScpICE9PSB1bmRlZmluZWQpID8gY2FwdHVyZUVsZW1lbnQoJyNub3RpZnknKS52YWx1ZSA6ICdub3RpZnktbWQtY29udGVudCcsfX1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlQm9keS5hcHBlbmRDaGlsZChtZXNzYWdlQm9keUNvbnRlbnQpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VuZGVyID0gY3JlYXRlRWxlbWVudChbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnYSc6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjbGFzcyc6ICdsaW5rJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qJ2hyZWYnOiBhcHBIb3N0ICsgJ2FkZG9ucy9pcGluZm8vJyArIG1lc3NhZ2UuaXAsKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5kZXIudGV4dENvbnRlbnQgPSBtZXNzYWdlLmZfbmFtZSArICcgJyArIG1lc3NhZ2UubF9uYW1lICsgJyBzZW5kIGEgJyArIG1lc3NhZ2Uuc3ViamVjdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlQm9keUNvbnRlbnQuYXBwZW5kQ2hpbGQoc2VuZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50ID0gY3JlYXRlRWxlbWVudChbeydwJzoge319XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudC50ZXh0Q29udGVudCA9IG1lc3NhZ2UubWVzc2FnZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlQm9keUNvbnRlbnQuYXBwZW5kQ2hpbGQoY29udGVudCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwdHVyZUVsZW1lbnQoXCIjc3lzdGVtLWNvbnRhY3QtbWVzc2FnZS12aWV3ZXJcIikuYXBwZW5kQ2hpbGQobWVzc2FnZUJvZHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcHR1cmVFbGVtZW50KFwiI3N5c3RlbS1jb250YWN0LW1lc3NhZ2Utdmlld2VyXCIpLnRleHRDb250ZW50ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlQm9keSA9IGNyZWF0ZUVsZW1lbnQoW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZGl2Jzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOiAnYm94LW1lc3NhZ2UgYm94LWRhbmdlciBib3gtc2hhZG93LWxpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyonc3R5bGUnOiAncGFkZGluZzogMCAwIDAgNHB4OycsKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlSWNvbiA9IGNyZWF0ZUVsZW1lbnQoW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnc3Bhbic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzogJ2JveC1kYW5nZXItc3ltYm9sJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlQm9keS5hcHBlbmRDaGlsZChtZXNzYWdlSWNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtZXNzYWdlSWNvbkZpbGUgPSBjcmVhdGVFbGVtZW50KFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2knOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjbGFzcyc6ICdmYSBmYS10aW1lcycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZUljb24uYXBwZW5kQ2hpbGQobWVzc2FnZUljb25GaWxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2VCb2R5Q29udGVudCA9IGNyZWF0ZUVsZW1lbnQoW3snZGl2JzogeydjbGFzcyc6ICdub3RpZnktbWQtY29udGVudCcsfX1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2VCb2R5Q29udGVudC50ZXh0Q29udGVudCA9ICdObyBtZXNzYWdlIGZvdW5kLic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlQm9keS5hcHBlbmRDaGlsZChtZXNzYWdlQm9keUNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwdHVyZUVsZW1lbnQoXCIjc3lzdGVtLWNvbnRhY3QtbWVzc2FnZS12aWV3ZXJcIikuYXBwZW5kQ2hpbGQobWVzc2FnZUJvZHkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoY2FwdHVyZUVsZW1lbnQoJyNzeXN0ZW0tZGVmYXVsdC1tZW51cycpICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbmRSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXRob2Q6IFwiR0VUXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBzZWxmLmFwcEhvc3QgKyAnc3lzdGVtL2luZGV4L2dldE1haW5JdGVtVGFicycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiBbe25hbWU6IFwiQ29udGVudC10eXBlXCIsIHZhbHVlOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwifV0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2U6IGFueSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5sZW5ndGggIT09IDAgJiYgSXNKc29uU3RyaW5nKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoSlNPTi5wYXJzZShyZXNwb25zZSkubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0dXJlRWxlbWVudChcIiNzeXN0ZW0tZGVmYXVsdC1tZW51c1wiKS50ZXh0Q29udGVudCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSlNPTi5wYXJzZShyZXNwb25zZSkuZm9yRWFjaChmdW5jdGlvbiAobWVudTogYW55KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3lzdGVtTWVudSA9IGNyZWF0ZUVsZW1lbnQoW3tcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2EnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnY2xhc3MnOiAndGh1bWJuYWlsLW1kIGJveC1zaGFkb3ctbGlnaHQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2hyZWYnOiBzZWxmLmFwcEhvc3QgKyAnc3lzdGVtLycgKyBtZW51LnVybCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICd0aXRsZSc6IG1lbnUudGl0bGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3lzdGVtTWVudUljb24gPSBjcmVhdGVFbGVtZW50KFt7J3NwYW4nOiB7J2NsYXNzJzogJ3RodW1ibmFpbC1pbWFnZScsfX1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW1NZW51LmFwcGVuZENoaWxkKHN5c3RlbU1lbnVJY29uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzeXN0ZW1NZW51SWNvbkZpbGUgPSBjcmVhdGVFbGVtZW50KFt7J2knOiB7J2NsYXNzJzogbWVudS5pY29uLH19XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3lzdGVtTWVudUljb24uYXBwZW5kQ2hpbGQoc3lzdGVtTWVudUljb25GaWxlKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHN5c3RlbU1lbnVOYW1lID0gY3JlYXRlRWxlbWVudChbeydkaXYnOiB7J2NsYXNzJzogJ3RodW1ibmFpbC10ZXh0Jyx9fV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5c3RlbU1lbnVOYW1lLnRleHRDb250ZW50ID0gbWVudS5uYW1lO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5c3RlbU1lbnUuYXBwZW5kQ2hpbGQoc3lzdGVtTWVudU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcHR1cmVFbGVtZW50KFwiI3N5c3RlbS1kZWZhdWx0LW1lbnVzXCIpLmFwcGVuZENoaWxkKHN5c3RlbU1lbnUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzeXN0ZW1NZW51ID0gY3JlYXRlRWxlbWVudChbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdkaXYnOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdjbGFzcyc6ICd0aHVtYm5haWwtbWQgYm94LXNoYWRvdy1saWdodCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdzdHlsZSc6ICdwYWRkaW5nOiA0NXB4IDI1cHg7JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW1NZW51LnRleHRDb250ZW50ID0gJ05vIG1lbnUgZXhpc3RzLic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0dXJlRWxlbWVudChcIiNzeXN0ZW0tZGVmYXVsdC1tZW51c1wiKS5hcHBlbmRDaGlsZChzeXN0ZW1NZW51KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhcHR1cmVFbGVtZW50KCcjc3lzdGVtLWV4dHJhLW1lbnVzJykgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFJlcXVlc3Qoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZDogXCJHRVRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHNlbGYuYXBwSG9zdCArICdzeXN0ZW0vaW5kZXgvZ2V0RXh0cmFJdGVtVGFicycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXN5bmM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyOiBbe25hbWU6IFwiQ29udGVudC10eXBlXCIsIHZhbHVlOiBcImFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD1VVEYtOFwifV0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2U6IGFueSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5sZW5ndGggIT09IDAgJiYgSXNKc29uU3RyaW5nKHJlc3BvbnNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoSlNPTi5wYXJzZShyZXNwb25zZSkubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXB0dXJlRWxlbWVudCgnI3N5c3RlbS1leHRyYS1tZW51cycpLnRleHRDb250ZW50ID0gJyc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBKU09OLnBhcnNlKHJlc3BvbnNlKS5mb3JFYWNoKGZ1bmN0aW9uIChtZW51OiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHRyYU1lbnUgPSBjcmVhdGVFbGVtZW50KFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdhJzoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzogJ3RodW1ibmFpbC1tZCBib3gtc2hhZG93LWxpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdocmVmJzogc2VsZi5hcHBIb3N0ICsgJ3N5c3RlbS8nICsgbWVudS51cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAndGl0bGUnOiBtZW51LnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4dHJhTWVudUljb24gPSBjcmVhdGVFbGVtZW50KFt7J3NwYW4nOiB7J2NsYXNzJzogJ3RodW1ibmFpbC1pbWFnZScsfX1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYU1lbnUuYXBwZW5kQ2hpbGQoZXh0cmFNZW51SWNvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXh0cmFNZW51SWNvbkZpbGUgPSBjcmVhdGVFbGVtZW50KFt7J2knOiB7J2NsYXNzJzogbWVudS5pY29uLH19XSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFNZW51SWNvbi5hcHBlbmRDaGlsZChleHRyYU1lbnVJY29uRmlsZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHRyYU1lbnVOYW1lID0gY3JlYXRlRWxlbWVudChbeydkaXYnOiB7J2NsYXNzJzogJ3RodW1ibmFpbC10ZXh0Jyx9fV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhTWVudU5hbWUudGV4dENvbnRlbnQgPSBtZW51Lm5hbWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmFNZW51LmFwcGVuZENoaWxkKGV4dHJhTWVudU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcHR1cmVFbGVtZW50KFwiI3N5c3RlbS1leHRyYS1tZW51c1wiKS5hcHBlbmRDaGlsZChleHRyYU1lbnUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBleHRyYU1lbnUgPSBjcmVhdGVFbGVtZW50KFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2Rpdic6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NsYXNzJzogJ3RodW1ibmFpbC1tZCBib3gtc2hhZG93LWxpZ2h0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ3N0eWxlJzogJ3BhZGRpbmc6IDQ1cHggMjVweDsnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhTWVudS50ZXh0Q29udGVudCA9ICdObyBtZW51IGV4aXN0cy4nO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FwdHVyZUVsZW1lbnQoXCIjc3lzdGVtLWV4dHJhLW1lbnVzXCIpLmFwcGVuZENoaWxkKGV4dHJhTWVudSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyKVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpXG4gICAgICAgIH0pO1xuICAgIH1cbn0iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=